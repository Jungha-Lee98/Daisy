# import SR,pyttsx,sqlite3
import speech_recognition as sr
import pyttsx3
import sqlite3

# import pyttsx engine
engine = pyttsx3.init()

# set speech rate
rate = engine.getProperty('rate')               
engine.setProperty('rate', 130)

# print "start program"
print("start program")

# getting details of current voice
voices = engine.getProperty('voices')       
engine.setProperty('voice',voices[1].id)  
# engine.setProperty('voice', voices[1].id) 
 
# obtain audio from the microphone
r = sr.Recognizer()

# set Microphone instances
with sr.Microphone(device_index=1, chunk_size=1024, sample_rate=48000) as source:
    print("Please wait. Calibrating microphone...") 
    r.adjust_for_ambient_noise(source, duration=1) 
    r.energy_threshold = 1000
    r.dynamic_energy_threshold = True
    r.dynamic_energy_adjustment_damping = 0.15
    r.dynamic_energy_adjustment_ratio = 1.5
    r.pause_threshold = 0.8
    
    
    # keywords trigger def
    def start_speaker():
        # set initial value
        start = True
        # recognize words "Hey Daisy"

        while (start == True):

            audio1 = r.listen(source)
            daisy = "hey daisy"
            try: 
                recognize = r.recognize_sphinx(audio1, language = "en-US", keyword_entries = [(daisy,0.8)]) # set key words
                print(recognize) 

                engine.say("Hi, I'm Daisy")
                engine.runAndWait()
                print("Hi, I'm Daisy")
                print("\n")
                break

            except sr.UnknownValueError:
                print("unknown")
                continue

            except:
                print("other error")
                continue


    # Text to Speech and Speech to Text Logic Function (main)
    def Main_logic():

        # set initial value
        logic_start=True

        # while statement 
        while (logic_start == True):


            engine.say("what is your question?")
            engine.runAndWait()
            print("what is your question?")
            print("\n")

            # input user's question
            audio2 = r.listen(source)
            
            # try-exception statement
            try:

                # recognize question using Sphinx
                print("Sphinx thinks you said " + r.recognize_sphinx(audio2))
                print("\n")
                
                all_words_list=[] # all words list 
                words_list = [] # words list except articles and be_verb 

                # split sentence into words
                all_words_list = r.recognize_sphinx(audio2).split(' ')
                print(all_words_list)
                print("\n")

                # remove articles an verbs
                for words in all_words_list:

                    if (words == 'the') or (words == 'a') or (words == 'of') or (words == 'an'):
                        continue
                    elif words == 'that' or words == 'for' or words == 'as':
                        continue
                    elif words == 'is' or words == 'use' or words == 'used' or words == 'rent' or words == 'rented':
                        continue
                    else:
                        words_list.append(words)

                #check words_list
                print(words_list)
                print("\n")

                # when using avg function in SQL 
                def avg():
                    for i in range(len(words_list)):
                        if words_list[i]=='average':
                            if words_list[i+1] == 'time':
                                return('avg(tripduration) ')
                            elif words_list[i+1] == 'age':
                                return('avg(tripduration) ')
                

                sqlquery = [] # sql_sentence's words list

                # translate words into sql query
                for loop in words_list:

                    if loop == 'what' or loop =='which' or loop =='where' or loop == "where's" or loop == 'how':
                        sqlquery.append("select ")

                    elif loop == ('place' or 'station'):
                        sqlquery.append("from_station_name ")
                        sqlquery.append("from divvy_2015 group by from_station_name ")

                    elif loop == 'average':
                        sqlquery.append(avg())
                        
                    elif loop == 'each':
                        sqlquery.append('from divvy_2015 ')
                        sqlquery.append('group by ')

                    elif loop == 'members' or loop == 'member':
                        sqlquery.append("from divvy_2015 where usertype='Subscriber' ")
                    
                    elif loop == 'most' or loop == 'almost':
                        sqlquery.append("order by count(*) desc ")
                        sqlquery.append("limit 1 ")
                    
                    elif loop == ('many'):
                        sqlquery.append("count(*) ")

                    elif loop == 'customer' or loop == 'customers':
                        sqlquery.append('from divvy_2015 where usertype="Customer" ')
                            
                    elif loop == 'subscriber' or loop == 'subscribers':
                        sqlquery.append('from divvy_2015 where usertype="Subscriber" ')
                            
                    elif loop == 'female' or (loop == 'females'):
                        sqlquery.append('from divvy_2015 where gender="Female" ') 

                    elif loop == 'user' or loop == 'users':
                        continue

                    elif loop == 'bicycles' or loop == 'bicycle':
                        continue

                    elif loop == 'people' or loop == 'them':
                        continue

                    elif loop == 'time':
                        continue

                    else:
                        # when can't match words, delete list sqlquery
                        del sqlquery[:] 

                        print("no match words")
                        print("\n")
                        break
                        
                # get answer from database
                if sqlquery:
                    strsqlquery = ''.join(sqlquery) + ';'
                    print(strsqlquery)
                    print("\n")

                    # connect database,sqlite3
                    sqliteConnection = sqlite3.connect("C:\\Users\\USER\\divvy.db")
                    cursor =sqliteConnection.cursor()
                    print("Database created and Successfully Connected to SQLite")
                    print("\n")

                    # execute sql query
                    cursor.execute(strsqlquery)

                    # cursor.fetchall(), print answer what user wants
                    for row in cursor:
                        print(row)
                        print("\n")

                    answer_list=[] # words list to use answer

                    # remove question mark and print answer sentence
                    for word in all_words_list:
                        if (word == 'how') or (word =='many') or (word == 'what') or (word == 'where') or (word == 'which'):
                            continue
                        else:
                            answer_list.append('{0} '.format(word))
                    print(answer_list)
                    print("\n")
                    
                    # speak answer to user
                    answer = ('{0}' +' '+ ''.join(answer_list)).format(row)
                    print(answer)
                    print("\n")
                    engine.say(answer)
                    engine.runAndWait()

                    # close cursor
                    cursor.close()

                    engine.say("Do you have any other question?")
                    engine.runAndWait()
                    
                    print("say your answer")
                    audio3 = r.listen(source)
                
                    # recognize user's answer 
                    answer_recognize = r.recognize_sphinx(audio3)
                    print(answer_recognize) 

                    if answer_recognize == "no" or answer_recognize == "no i don't":
                        print("end program")
                        break
                        
                    elif answer_recognize == "yes" or answer_recognize == "yes i have":
                        print("start again")
                        continue
                        
                    else:
                        print("end")
                        break

                # can't get answer 
                else:
                    print("can't make sql query.")
                    print("\n")
                    
                    # ask if user want to try again 
                    print("ask if user want to try again ")
                    print("\n")

                    engine.say("Sphinx could not understand audio.Could you tell me question again?")
                    engine.runAndWait()
                    
                    print("say your answer")
                    audio3 = r.listen(source)
                
                    # recognize user's answer 
                    answer_recognize = r.recognize_sphinx(audio3)
                    print(answer_recognize) 

                    if answer_recognize == "no" or answer_recognize == "no I don't":
                        print("end program")
                        break
                        
                    elif answer_recognize == "yes" or answer_recognize == "yes I have":
                        print("start again")
                        continue
                        
                    else:
                        print("end")
                        break

            except sr.UnknownValueError:

                print("sr.UnknownValueError")
                print("\n")

                engine.say("Sphinx could not understand audio. Could you tell me question again?")
                engine.runAndWait()
               
                print("say your answer")
                audio3 = r.listen(source)
            
                # recognize user's answer 
                answer_recognize = r.recognize_sphinx(audio3)
                print(answer_recognize) 

                if answer_recognize == "no" or answer_recognize == "no i don't":
                    print("end program")
                    break
                    
                elif answer_recognize == "yes" or answer_recognize == "yes i have":
                    print("start again")
                    continue
                    
                else:
                    print("end")
                    break

            except sr.RequestError as e:
                print("Sphinx error; {0}".format(e))
                print("\n")

                engine.say("I can't understand your question. Could you tell me question again?")
                engine.runAndWait()
                
                print("say your answer")
                audio3 = r.listen(source)
            
                # recognize user's answer 
                answer_recognize = r.recognize_sphinx(audio3)
                print(answer_recognize) 

                if answer_recognize == "no" or answer_recognize == "no I don't":
                    print("end program")
                    break
                    
                elif answer_recognize == "yes" or answer_recognize == "yes I have":
                    print("start again")
                    continue
                    
                else:
                    print("end")
                    break


            except sqlite3.Error as error:
                print("Error while connecting to sqlite", error)
                print("\n")

                engine.say("I can't understand your question. Could you tell me question again?")
                engine.runAndWait()

                print("say your answer")
                audio3 = r.listen(source)
            
                # recognize user's answer 
                answer_recognize = r.recognize_sphinx(audio3)
                print(answer_recognize) 

                if answer_recognize == "no" or answer_recognize == "no i don't":
                    print("end program")
                    break
                    
                elif answer_recognize == "yes" or answer_recognize == "yes i have":
                    print("start again")
                    continue
                    
                else:
                    print("end")
                    break

            except:
                if (sqliteConnection):
                    sqliteConnection.close()
                    print("The SQLite connection is closed")
                    print("\n")
            
                    engine.say("Sphinx could not understand audio.Could you tell me question again?")
                    engine.runAndWait()
                    
                    print("say your answer")
                    audio3 = r.listen(source)
                
                    # recognize user's answer 
                    answer_recognize = r.recognize_sphinx(audio3)
                    print(answer_recognize) 

                    if answer_recognize == "no" or answer_recognize == "no i don't":
                        print("end program")
                        break
                        
                    elif answer_recognize == "yes" or answer_recognize == "yes i have":
                        print("start again")
                        continue
                        
                    else:
                        print("end")
                        break

    # run start_speaker function
    start_speaker()

    # run main_logic
    Main_logic()
    
    engine.say("goodbye")
    engine.runAndWait()